name: 'Terraform DB Infra CI/CD'

on:
  push:
    branches:
      - main
  
  pull_request:
    branches:
      - main

  workflow_dispatch:

jobs:
  # -----------------------------------------------------------------
  # JOB 1: VALIDATE - Roda primeiro e valida a qualidade do código.
  # -----------------------------------------------------------------
  validate:
    name: 'Validar Código Terraform'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Instala a CLI do Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Inicializa o Terraform
        run: terraform init -backend=false # Não precisa de credenciais para validar

      - name: Verifica a formatação do código (fmt)
        run: terraform fmt -check

      - name: Valida a sintaxe do código (validate)
        run: terraform validate -no-color
  
  # -----------------------------------------------------------------
  # JOB 2: PLAN - Roda após a validação e gera o plano de execução.
  # -----------------------------------------------------------------
  plan:
    name: 'Gerar Plano de Execução'
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: 'us-east-1'

      - name: Instala a CLI do Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Inicializa o Terraform
        run: terraform init

      - name: Gerar Plano do Terraform
        id: plan
        run: terraform plan -input=false -no-color -var="db_password=${{ secrets.DB_PASSWORD }}"
  
  # -----------------------------------------------------------------
  # JOB 3: APPLY - Roda por último, apenas após merge na 'main'.
  # -----------------------------------------------------------------
  apply:
    name: 'Aplicar na AWS (Deploy)'
    runs-on: ubuntu-latest
    needs: [validate, plan]

    # CONDIÇÃO CRÍTICA: Este job só executa se o evento for o fechamento de um PR que foi mergeado na 'main'.
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: 'us-east-1'

      - name: Instala a CLI do Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Inicializa o Terraform
        run: terraform init

      - name: Aplica as mudanças na AWS (Terraform Apply)
        run: terraform apply -auto-approve -input=false -var="db_password=${{ secrets.DB_PASSWORD }}"