name: 'Terraform DB Infra CI/CD'

on:
  # Dispara a pipeline em push para a branch de desenvolvimento
  push:
    branches:
      - dev
  
  # Dispara a pipeline quando um Pull Request for aberto (ou atualizado) para a 'main'
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened, closed]

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    
    steps:
      # Etapa 1: Faz o download do código do seu repositório para a máquina virtual.
      # Isso permite que os próximos passos acessem seus arquivos .tf.
      - name: Checkout
        uses: actions/checkout@v4

      # Etapa 2: Configura as credenciais da AWS na máquina virtual.
      # Ele usa os "Secrets" que você configurou no GitHub para se autenticar
      # de forma segura na sua conta da AWS.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: 'us-east-1'

      # Etapa 3: Instala a ferramenta (CLI) do Terraform na máquina virtual.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # Etapa 4: Inicializa o Terraform.
      # Este comando prepara o ambiente, baixando os provedores necessários (como o da AWS).
      - name: Terraform Init
        run: terraform init

      # Etapa 5: Verifica a formatação do código.
      # Garante que todos os arquivos .tf sigam o padrão de estilo do Terraform.
      - name: Terraform Format
        run: terraform fmt -check

      # Etapa 6: Valida a sintaxe do código.
      # Verifica se há erros de sintaxe nos arquivos .tf.
      - name: Terraform Validate
        run: terraform validate -no-color

      # Etapa 7: Gera um plano de execução.
      # O Terraform cria um "plano" que mostra exatamente quais recursos
      # serão criados, alterados ou destruídos na AWS, sem executar nada ainda. É um "preview".
      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false -no-color -var="db_password=${{ secrets.DB_PASSWORD }}"
      
      # Etapa 8: Aplica as mudanças na infraestrutura.
      # Este passo executa o plano gerado anteriormente, criando ou alterando os recursos na AWS.
      # A condição 'if' garante que esta etapa SÓ execute após o merge de um PR na branch 'main'.
      # - name: Terraform Apply
      #   if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
      #   run: terraform apply -auto-approve -input=false -var="db_password=${{ secrets.DB_PASSWORD }}"

      # Etapa 8: Importa recursos existentes e sincroniza o estado
      - name: Importar Recursos e Sincronizar Estado
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        run: |
          # O primeiro argumento é o endereço do recurso no código .tf
          # O segundo é o ID/Nome real do recurso na AWS
          terraform import aws_s3_bucket.terraform_state soat-infra-db-tfstate-bucket
          terraform import aws_secretsmanager_secret.db_password_secret db-password-secret-2
          terraform import aws_security_group.rds_sg soat-rds-sg
          
          # Após importar, rode um apply para confirmar que o estado está 100% sincronizado
          terraform apply -auto-approve -input=false -var="db_password=${{ secrets.DB_PASSWORD }}"